"""
Django settings for nosycolors project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import ast
import logger
import string
import tweepy
from tweepy import OAuthHandler, AppAuthHandler

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

logger.error(os.environ)
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.10/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

if 'RDS_HOSTNAME' in os.environ:
  SECRET_KEY = os.environ['RDS_SECRET_KEY']

  TWITTER_AUTH = tweepy.AppHandler(os.environ['RDS_CONSUMER_KEY'], os.environ['RDS_CONSUMER_SECRET'])
  # TWITTER_AUTH = tweepy.OAuthHandler(os.environ['RDS_CONSUMER_KEY'], os.environ['RDS_CONSUMER_SECRET']),
  TWITTER_AUTH.set_access_token(os.environ['RDS_ACCESS_TOKEN'], os.environ['RDS_ACCESS_SECRET'])
  CONSUMER_KEY = os.environ['RDS_CONSUMER_KEY']
  CONSUMER_SECRET = os.environ['RDS_CONSUMER_SECRET']
  ACCESS_TOKEN = os.environ['RDS_ACCESS_TOKEN']
  ACCESS_SECRET = os.environ['RDS_ACCESS_SECRET']
  CALLBACK_URL = os.environ['RDS_CALLBACK_URL']
  DATABASES = {
      'default': {
          'ENGINE': 'django.db.backends.mysql',
          'NAME': os.environ['RDS_DB_NAME'],
          'USER': os.environ['RDS_USERNAME'],
          'PASSWORD': os.environ['RDS_PASSWORD'],
          'HOST': os.environ['RDS_HOSTNAME'],
          'PORT': os.environ['RDS_PORT'],
      }
  }
else:
  SECRET_KEY = os.environ['NC_SECRET_KEY']
  USER_NAME = os.environ['NC_DB_USER']
  DATABASE_NAME = os.environ['NC_DB_NAME']
  DATABASE_KEY = os.environ['NC_DB_KEY']
  CONSUMER_KEY = os.environ['NC_CONSUMER_KEY']
  CONSUMER_SECRET = os.environ['NC_CONSUMER_SECRET']
  ACCESS_TOKEN = os.environ['NC_ACCESS_TOKEN']
  ACCESS_SECRET = os.environ['NC_ACCESS_SECRET']
  CALLBACK_URL = os.environ['NC_CALLBACK_URL']
  HOST = os.environ['NC_HOST']
  PORT = os.environ['NC_PORT']



# SECRET_KEY = os.environ['NC_SECRET_KEY']

# TWITTER_AUTH = tweepy.AppAuthHandler(os.environ['NC_CONSUMER_KEY'], os.environ['NC_CONSUMER_SECRET'])
TWITTER_AUTH = tweepy.OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET) 
TWITTER_AUTH.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)



# *************************************
# NOT SURE IF THIS BELONGS HERE??
# print(os.environ)
# TWITTER_AUTH = tweepy.OAuthHandler(os.environ['NC_CONSUMER_KEY'], os.environ['NC_CONSUMER_SECRET'])
# TWITTER_AUTH.set_access_token(os.environ['NC_ACCESS_TOKEN'], os.environ['NC_ACCESS_SECRET'])

# # has a greater rate limit than OAuth
# # TWITTER_AUTH = tweepy.AppAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)


AUTHORIZED_USER = tweepy.API(TWITTER_AUTH, wait_on_rate_limit=True, wait_on_rate_limit_notify=True)
# *************************************


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['localhost', '54.187.186.135', 'color-env.4yydtwdmva.us-west-2.elasticbeanstalk.com', 'www.redsquirrelious.io', 'redsquirrelious.io']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'pies',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'nosycolors.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'nosycolors.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': os.environ['NC_DATABASE_NAME'],
#         'USER': os.environ['NC_USER_NAME'],
#         'PASSWORD': os.environ['NC_DATABASE_KEY'],
#         'HOST': os.environ['NC_HOST'],
#         'PORT': os.environ['NC_PORT'],
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': DATABASE_NAME,
        'USER': USER_NAME,
        'PASSWORD': DATABASE_KEY,
        'HOST': HOST,
        'PORT': PORT,
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

